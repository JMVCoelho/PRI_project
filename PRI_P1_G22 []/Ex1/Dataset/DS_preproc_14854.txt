following program quick hack created months ago determine whether sun sparcstation ipc could perform real time full duplex encrypted audio resulting data rates sustainable today modemstest program reads linearly encoded audio audio device compresses gsm compresses frames bit samples recorded khz bits resulting hz frame rate encrypts des reverses process sends reconstructed audio back audio devicecompressed encrypted audio stream kbitssparcstation ipc exactly fast machine days certainly slower elc would barely sustain activity audio underruns would occcur speech intelligibleran real time process get best resultsremember though program quick hack performance certainly improvedaudio compression routines ftp tub cs tu berlin de believe look gsm toastused eric young des implementation longer know gotcheers greg cut test program see much cpu takes secure digital audiowritten g onufer greg cheers bungi comwritten sun ipc running solaris sun isdn bus card speakerboxinclude stdlib h include unistd h include fcntl h include stdio h include sys types h include sys audioio h include stropts h include gsm h include des h boolean_t svs_audio_init int fd audio_info_t prev_info audio_info_t info prev_info null ioctl fd audio_getinfo prev_info perror audio_getinfo return b_false audio_initinfo info info record pause b_true info play pause b_true info play sample_rate info play encoding audio_encoding_linear info play channels info play precision info record sample_rate info record encoding audio_encoding_linear info record channels info record precision info record buffer_size ioctl fd audio_setinfo info perror audio_setinfo return b_false ioctl fd i_flush flushrw perror i_flush return b_false audio_initinfo info info record pause b_false info play pause b_false ioctl fd audio_setinfo info perror audio_setinfo return b_false return b_true boolean_t svs_in int ifd gsm handle gsm_byte buf gsm_signal sample read ifd sample sizeof sample sizeof sample fprintf stderr svs_in short read n return b_false gsm_encode handle sample buf return b_true boolean_t svs_out int ofd gsm handle gsm_byte buf gsm_signal sample gsm_decode handle buf sample fprintf stderr svs_out gsm_decode failed n return b_false write ofd sample sizeof sample sizeof sample fprintf stderr svs_out short write n return b_false return b_true main gsm handle gsm_frame frame int audiofd int option des_cblock key ivec_in ivec_out des_key_schedule ks_in ks_out des_cblock cbuf_in cbuf_out cbuf_buf audiofd open dev audio o_rdwr audiofd perror open exit initialize gsm compression code handle gsm_create null fprintf stderr svs gsm_create failed n exit option b_true gsm_option handle gsm_opt_fast option fprintf stderr svs gsm_option fast failed n exit initialize des code des_random_key key des_set_key key ks_in fprintf stderr svs des_set_key failed n exit des_set_key key ks_out fprintf stderr svs des_set_key failed n exit memset ivec_in sizeof ivec_in memset ivec_out sizeof ivec_out open audio device configure svs_audio_init audiofd null exit get samples bit linear hz convert byte frame svs_in audiofd handle frame exit encrypt decrypt block des_cbc_encrypt frame cbuf_out long ks_in ivec_in des_encrypt des_cbc_encrypt cbuf_out cbuf_buf long ks_out ivec_out des_decrypt memmove frame cbuf_buf memcmp cbuf_in cbuf_buf fprintf stderr svs memcmp failed n exit endif take byte frame convert samples play svs_out audiofd handle frame exit